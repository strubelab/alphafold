#!/usr/bin/env python3

"""
Script to make features for a list of protein sequences
"""

import argparse
from Bio import SeqIO
from pathlib import Path
from datetime import date
from alphafold_ibex.alphafold_ibex import AlphafoldIbex
from alphafold_ibex.utils import read_sequences, check_missing_sequences
                                  
import sys

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    def validate_num(num:str):
        """
        Validate the number in the arguments for gpu, mem, time and recycles

        Args:
            num (str): Number provided
        """
        if num=='auto':
            return num
        
        return int(num)
    
    def validate_date(d:str):
        """
        Validate the date format

        Args:
            d (str): date in YYYY-MM-DD format

        Returns:
            str: same date if valid
        """
        dsplit = d.split('-')
        if len(dsplit) < 3:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        elif int(dsplit[1]) > 12:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        
        return d

    parser = argparse.ArgumentParser(description=('Takes one or more FASTA '
        'files with amino acid sequences, and submits a '
        'job array to ibex to make features for each sequence.'))

    parser.add_argument("--input", help=('Fasta file(s) with the sequence(s) '
        'to model. Provide one fasta file for each model that you want to '
        'produce.'), nargs='+')

    parser.add_argument("--destination", 
        help=('Path for saving the resulting AlphaFold features. It will create '
        'one subdirectory for each model. Also will contain the sequence files ' 
        'as they were submitted to ibex, the script that was submitted and the '
        'ibex stdout files.'), required=True)
    
    parser.add_argument("--time", help=('Time in minutes to give to each job. '
        '(default="auto")'), type=validate_num, default='auto')

    parser.add_argument("--mem", help=('Memory in GB to allocate to each job. '
        '(default="auto")'), type=validate_num, default='auto')

    parser.add_argument("--mail", help=('Email to send notifications about the '
                'job progess in ibex.'), type=str)
    
    parser.add_argument("--max_jobs",
        help=("Maximum number of jobs to submit simultaneously to ibex. Default=1990"),
        type=int, default=1990)
    
    parser.add_argument("--wekafs",
        help=("Whether to use the databases in wekafs (you need to have access)"),
        action='store_true')
    
    parser.add_argument("--old_uniclust",
        help=("If hhblits is causing an error along the lines of `ERROR: did "
              "not find ### match states in sequence 1 of ##########`, try "
              "using the older version of the UniClust database (UniRef30_2021_03) "
              "to calculate the MSAs with HHblits."), action='store_true')
    
    parser.add_argument("--max_template_date",
        help=('Maximum template release date to consider. Give value in '
              'YYYY-MM-DD format.'), type=validate_date,
        default=date.today().isoformat())
 
    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    
    # Read all sequences in every input file or directory and put together in a list
    sequences = []
    for f in args.input:
        sequences += read_sequences(f)
    
    sequences = [[s] for s in sequences]
    
    print(f'Read {len(sequences)} sequences...')
    
    ######### Check for any existing features
    out_dir = Path(args.destination)
    
    if out_dir.exists():
        missing_sequences = check_missing_sequences(out_dir, sequences)
    else:
        out_dir.mkdir()
        missing_sequences = sequences
    
    print(f'Number of features to generate: {len(missing_sequences)}')
    
    ######### Get the rest of the parameters
    
    if args.wekafs:
        gpu_type = 'a100'
    else:
        gpu_type = 'v100'
        
    if args.time=='auto':
        time = 300
    else:
        time = args.time
    
    if args.mem=='auto':
        mem = 64
    else:
        mem = args.mem

    # Save command to output dir
    with open(out_dir/'command.txt', 'w') as f:
        f.write(' '.join(sys.argv))
        f.write('\n')
    
    # Run AlphaFold
    if len(missing_sequences) > 0:
        print('Running AlphaFold to calculate features...')
        exe = AlphafoldIbex(missing_sequences, out_dir=out_dir, jobname='AF_features',
                            gpu_type=gpu_type, only_features_chain='A',
                            mail=args.mail, time_per_command=time, mem=mem,
                            max_jobs=args.max_jobs, old_uniclust=args.old_uniclust,
                            max_template_date=args.max_template_date)
        exe.run()
