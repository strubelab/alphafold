#!/usr/bin/env python3

"""
Script to extract the quality scores the models made by AlphaFold
"""

import argparse
from pathlib import Path
import os
import biskit as b

import logging
logging.getLogger().setLevel(logging.INFO)

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """
    
    def validate_dir(d:str) -> Path:
        """
        Validate that the directory with the features exists
        """
        d = Path(d)
        if not d.exists():
            raise ValueError("The specified directory doesn't exist.")
            
        return d
    
    def validate_out(d:str) -> Path:
        """
        Create the directory if it doesn't exist.
        """
        d = Path(d)
        if not d.exists():
            d.mkdir()
        return d

    parser = argparse.ArgumentParser(description=('Copy the top structures and '
        'plots to other directories.'))
    
    parser.add_argument("--models_dir", 
        help=('Path with the resulting AlphaFold models.'), required=True,
        type=validate_dir)
    
    parser.add_argument("--destination",
        help=("Path to save the top pdbs and the top plots."), required=True,
        type=validate_out)
    
    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    
    pdbs = args.models_dir.glob("*.pdb")
    
    count=0
    for pdb in pdbs:
        
        m = b.PDBModel(os.fspath(pdb))
        len_a = len(m.takeChains([0]).atom2resProfile('residue_number'))
        chainb = m.takeChains([1])
        chainb.renumberResidues(start=len_a+31)
        m2 = m.takeChains([0]).concat(chainb)
        m2.mergeChains(0, renumberResidues=False)
        
        new_name = args.destination / pdb.stem+'_joint.pdb'
        m2.writePdb(os.fspath(new_name))
        
        count += 1
                
    logging.info(f"Processed {count} models.")
