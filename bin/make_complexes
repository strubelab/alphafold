#!/usr/bin/env python3

"""
Script to make features for a list of protein sequences
"""

import argparse
from Bio import SeqIO
from pathlib import Path
from datetime import date
import pickle
from alphafold_ibex.alphafold_ibex import AlphafoldIbex
from alphafold_ibex.utils_complexes import (read_sequences, validate_models, get_id,
                                check_existing_features, check_missing_models,
                                get_errors)

from typing import List
import sys

import logging
logging.getLogger().setLevel(logging.INFO)

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    def validate_num(num:str):
        """
        Validate the number in the arguments for gpu, mem, time and recycles

        Args:
            num (str): Number provided
        """
        if num=='auto':
            return num
        
        return int(num)
    
    def validate_date(d:str):
        """
        Validate the date format

        Args:
            d (str): date in YYYY-MM-DD format

        Returns:
            str: same date if valid
        """
        dsplit = d.split('-')
        if len(dsplit) < 3:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        elif int(dsplit[1]) > 12:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        
        return d
    
    def validate_features_dir(d:str) -> Path:
        """
        Validate that the directory with the features exists
        """
        d = Path(d)
        if not d.exists():
            raise ValueError("The specified features directory doesn't exist.")
            
        return d
    
    def validate_bait(f:str) -> Path:
        """
        Validate that the bait file exists
        """
        f = Path(f)
        if not f.exists():
            raise ValueError("The specified bait file doesn't exist.")
        
        return f

    def validate_seed(f:str) -> Path:
        """
        Validate that the seed file exists
        """
        f = Path(f)
        if not f.exists():
            raise ValueError("The specified seed file doesn't exist.")
        
        return f
    
    def validate_stoichiomemtry(s:str) -> List[int]:
        """
        Validate the stoichiometry provided
        """
        if ':' not in s:
            raise ValueError('Stoichiometry must be provided as bait:candidate.')
        
        homomers = [int(n) for n in s.split(':')]
        
        return homomers
    

    parser = argparse.ArgumentParser(description=('Makes complex models in a '
                'ONE TO MANY fashion using AlphaFold. It will make complexes of'
                'one bait protein with many candidate proteins. The features '
                'must be pre-calculated and provided in a directory.'))
    
    parser.add_argument("--bait",
        help=("FASTA file with the sequence of the bait protein. This file must"
              " contain only ONE sequence."),
        type=validate_bait, required=True)

    parser.add_argument("--candidates", help=('Fasta file(s) with the sequence(s) '
        'to model as multimers against the bait protein.'), nargs='+')
    
    parser.add_argument("--stoichiometry",
        help=("Stoichiometry of the individual complexes provided as an integer"
              " pair in the form of bait:candidate. Default=1:1"),
        type=validate_stoichiomemtry, default=[1, 1])
    
    parser.add_argument("--features_dir", 
        help=('Path with the pre-calculated features.'), required=True,
        type=validate_features_dir)

    parser.add_argument("--destination", 
        help=('Path for saving the resulting AlphaFold models. It will create '
        'one subdirectory for each model. Also will contain the sequence files ' 
        'as they were submitted to ibex, the script that was submitted and the '
        'ibex stdout files.'), required=True)
    
    parser.add_argument("--screen_mode",
        help=("Whether to run AlphaFold in screen mode, which only saves the "
              "quality scores to text files and doesn't do relaxation. Default=False"),
        action='store_true')
    
    parser.add_argument("--time", help=('Time in minutes to give to each job. '
        '(default=30)'), type=int, default=30)

    parser.add_argument("--mem", help=('Memory in GB to allocate to each job. '
        '(default="auto")'), type=validate_num, default='auto')

    parser.add_argument("--mail", help=('Email to send notifications about the '
                'job progess in ibex.'), type=str)
    
    parser.add_argument("--max_jobs",
        help=("Maximum number of jobs to submit simultaneously to ibex. Default=1990"),
        type=int, default=1990)
    
    parser.add_argument("--gpu_type", help=("Whether to use V100 or A100 GPU."
        " If you don't know what this is, leave the default. (Default=v100)"),
        default='v100', choices=['v100','a100'])
    
    parser.add_argument("--models_to_run",
        help=("Which of the AlphaFold models to run. Choose 'all' to make all five"
              " models, 'two' to make only two models with different parameters"
              ", or give the name(s) of the specific model(s) that you want to "
              "run separated by spaces. Default = 'two'."), nargs='+')
    
    parser.add_argument("--multimer_predictions_per_model", help=('Number of '
        'multimeric predictions to make for each of the ML models that '
        'AlphaFold runs.'), type=int, default=1)
    
    parser.add_argument("--max_template_date",
        help=('Maximum template release date to consider. Give value in '
              'YYYY-MM-DD format.'), type=validate_date,
        default=date.today().isoformat())
    
    parser.add_argument("--models_to_relax", help=("The models to run the "
                        "final relaxation step on. If `all`, all models are "
                        "relaxed, which may be time consuming. If `best`, only "
                        "the most confident model is relaxed. If `none`, "
                        "relaxation is not run. Defaults to `best`."),
                        default='best', choices=['all','best','none'])
    
    parser.add_argument("--jobname",
        help=("Name of the job to submit to ibex. Defaults to 'AF_complexes'."),
        default='AF_complexes')
    
    parser.add_argument("--seeds",
        help=("Path to a .pkl file with the random seeds to use for the complexes."),
        default=None, type=validate_seed)
    
    parser.add_argument("--check_only",
        help=("Only check for existing features and models, don't run AlphaFold."
              " Searches for and prints out the error messages in the "
              "ibex stdout files."),
        action='store_true')
 
    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    
    bait = SeqIO.read(args.bait, 'fasta')
    model_names = validate_models(args.models_to_run)
    
    # Read all candidate sequences in every input file or directory and put together in a list
    sequences = []
    for f in args.candidates:
        sequences += read_sequences(f)
    
    logging.info(f'Read {len(sequences)} candidate sequences to multimerize with bait.')
    
    ######### Check for existing features
    logging.info(f'Checking for existing features in {args.features_dir}...')
    
    features_dir = Path(args.features_dir)
    completed = check_existing_features(features_dir, sequences, bait)
    
    logging.info(f'Found {len(completed)} features for {len(sequences)} '
                 'candidate sequences.')
    
    ######### Check for existing models in the destination directory
    
    out_dir = Path(args.destination)
    
    if out_dir.exists():
        logging.info(f"Checking for existing models in {out_dir}...")
        sequences_to_model, modeled, missing = check_missing_models(completed,
                                            out_dir,
                                            bait,
                                            sequences,
                                            args.stoichiometry,
                                            args.screen_mode,
                                            model_names,
                                            args.multimer_predictions_per_model)
        logging.info(f'Found {len(modeled)} models for {len(completed)} '
                     'pre-calculated features.')
    else:
        out_dir.mkdir()
        sequences_to_model = [s for s in sequences if get_id(s.id) in completed]
    
    # If only checking, print out the missing models
    if args.check_only:
        logging.info("Missing models:")
        if len(missing) == 0:
            print("None")
        else:
            error_files = get_errors(missing, out_dir)
            exit(0)

    # Get random seeds if given
    if args.seeds is not None:
        logging.info("Reading random seeds...")
        with open(args.seeds, 'rb') as f:
            seeds = pickle.load(f)
        
        ids_to_model = [get_id(s) for s in sequences_to_model]
        seeds = [seeds[i] for i in ids_to_model]
    else:
        seeds = None
        
    if len(sequences_to_model) > 0:
        # Make complexes
        nbait = args.stoichiometry[0]
        ncandidate = args.stoichiometry[1]
        complexes = [[bait]*nbait + [s]*ncandidate for s in sequences_to_model]
        logging.info(f'{len(complexes)} complexes to model.')

        # Save command to output dir
        with open(out_dir/'command.txt', 'w') as f:
            f.write(' '.join(sys.argv))
            f.write('\n')
        
        # Run AlphaFold
        logging.info('Running AlphaFold to calculate complexes...')
        exe = AlphafoldIbex(complexes, out_dir=out_dir, jobname=args.jobname,
                    models_to_relax=args.models_to_relax,
                    multimer_predictions_per_model=args.multimer_predictions_per_model,
                    gpu_type=args.gpu_type,
                    screen_mode=args.screen_mode,
                    features_dir=features_dir,
                    mail=args.mail,
                    time_per_command=args.time,
                    mem=args.mem,
                    model_names=model_names,
                    random_seeds=seeds)

        exe.run()
