#!/usr/bin/env python3

"""
Script to get the top structures from the models made by AlphaFold along with
their plots.
"""

import argparse
from pathlib import Path
import shutil
from alphafold_ibex.utils import process_outputs

import logging
logging.getLogger().setLevel(logging.INFO)

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """
    
    def validate_dir(d:str) -> Path:
        """
        Validate that the directory with the features exists
        """
        d = Path(d)
        if not d.exists():
            raise ValueError("The specified directory doesn't exist.")
            
        return d
    
    def validate_out(d:str) -> Path:
        """
        Create the directory if it doesn't exist.
        """
        d = Path(d)
        if not d.exists():
            d.mkdir()
        return d

    parser = argparse.ArgumentParser(description=('Copy the top structures and '
        'plots to other directories.'))
    
    parser.add_argument("--models_dir", 
        help=('Path with the resulting AlphaFold models.'), required=True,
        type=validate_dir)
    
    parser.add_argument("--destination",
        help=("Path to save the top pdbs and the top plots."), required=True,
        type=validate_out)
    
    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    pdbs_dir = args.destination / "pdbs"
    pdbs_dir.mkdir()
    plots_dir = args.destination / "plots"
    plots_dir.mkdir()
    
    count=0
    for d in args.models_dir.iterdir():
        if d.is_dir():
            top_pdb = d / "ranked_0.pdb"
            if top_pdb.exists():
                count += 1
                # Copy top pdb to new destination
                new_name = pdbs_dir / (d.name + ".pdb")
                shutil.copy(top_pdb, new_name)
                
                # Copy plots for top pdbs to new destination
                top_plot = list((d / "plots").glob("rank_0*.png"))[0]
                new_name = plots_dir / (d.name + ".png")
                shutil.copy(top_plot, new_name)
                
    logging.info(f"Processed {count} models.")
