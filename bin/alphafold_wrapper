#!/usr/bin/env python3

"""
Script to run the wrapper from the command line
"""

import argparse
from Bio import SeqIO
from pathlib import Path
from datetime import date
from alphafold_ibex.alphafold_ibex import AlphafoldIbex
import sys

def validate_file(input:str) -> Path:
        """
        Validate that the input is an existing file

        Args:
            input (str): Input file

        Returns:
            Path
        """
        inp = Path(input)
        if not inp.is_file():
            raise ValueError

        return inp


def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    def validate_num(num:str):
        """
        Validate the number in the arguments for gpu, mem, time and recycles

        Args:
            num (str): Number provided
        """
        if num=='auto':
            return num
        
        return int(num)
    
    def validate_out(d:str):
        """
        Validate that the output directory exists

        Args:
            d (str): destination directory

        Returns:
            _type_: _description_
        """
        d = Path(d)
        if not d.exists():
            d.mkdir()
            
        return d
    
    def validate_date(d:str):
        """
        Validate the date format

        Args:
            d (str): date in YYYY-MM-DD format

        Returns:
            str: same date if valid
        """
        dsplit = d.split('-')
        if len(dsplit) < 3:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        elif int(dsplit[1]) > 12:
            raise ValueError('Incorrect date format, please provide date as YYYY-MM-DD.')
        
        return d

    parser = argparse.ArgumentParser(description=('Takes one or more FASTA '
        'files with amino acid sequences (one for each model), and submits a '
        'job array to ibex to run AlphaFold on each file.'))

    parser.add_argument("--input", help=('Fasta file(s) with the sequence(s) '
        'to model. Provide one fasta file for each model that you want to '
        'produce.'), nargs='+')

    parser.add_argument("--destination", 
        help=('Path for saving the resulting AlphaFold models. It will create '
        'one subdirectory for each model. Also will contain the sequence files ' 
        'as they were submitted to ibex, the script that was submitted and the '
        'ibex stdout files.'), required=True, type=validate_out)

    parser.add_argument("--gpus", help=('Number of GPUs to request to ibex. '
        'It is likely that AlphaFold only ever uses 1. (default=1)'),
        type=validate_num, default=1)
    
    parser.add_argument("--time", help=('Time in minutes to give to each job. '
        '(default="auto")'), type=validate_num, default='auto')

    parser.add_argument("--mem", help=('Memory in GB to allocate to each job. '
        '(default="auto")'), type=validate_num, default='auto')
    
    parser.add_argument("--recycles", help=('Only for monomeric models. '
                                    'Set the number of times to recycle the '
        'output through the network. More recycles might help to mildly '
        'improve the quality of the models in some cases. Default is 3, max '
        'recommended is 10. Multimeric models run up to 20 recycles, but '
        'will stop if the difference in pairwise distances is less than 0.5.'
        ), type=validate_num, default=3)

    parser.add_argument("--cpus", help=("Number of CPUs to request. The MSA "
        "programs are set to use 8, which is the default here."),
        type=validate_num, default=8)

    parser.add_argument("--models_to_relax", help=("The models to run the "
                        "final relaxation step on. If `all`, all models are "
                        "relaxed, which may be time consuming. If `best`, only "
                        "the most confident model is relaxed. If `none`, "
                        "relaxation is not run. Defaults to `best`."),
                        default='best', choices=['all','best','none'])

    parser.add_argument("--use_precomputed_msas",
        help=("Set this flag if you want to reuse the MSA outputs from a "
        "previous run, for example if there was an error after the "
        "MSA step and you want to start the same run again, or if you want to "
        "make the same model but with a different number of recycles. "
        "Make sure to copy the old results to a new directory if you don't "
        "want to overwrite them."), action='store_true')

    parser.add_argument("--mail", help=('Email to send notifications about the '
                'job progess in ibex.'), type=str)

    parser.add_argument("--multimer_predictions_per_model", help=('Number of '
        'multimeric predictions to make for each of the 5 ML models that '
        'AlphaFold runs. The total number of structures (pdb files) predicted will be 5 '
        'times this number (e.g. `--multimer_predictions_per_model 5` will '
        'give 25 structures in total). Defaults to 1. NOTE: if you indicate '
        'more than 1, you might have to increase the time to be requested with '
        'the --time argument as well.'), type=int, default=1)
    
    parser.add_argument("--gpu_type", help=("Whether to use V100 or A100 GPU."
        " If you don't know what this is, leave the default. (Default=v100)"),
        default='v100', choices=['v100','a100'])
    
    parser.add_argument("--old_uniclust",
        help=("If hhblits is causing an error along the lines of `ERROR: did "
              "not find ### match states in sequence 1 of ##########`, try "
              "using the older version of the UniClust database (UniRef30_2021_03) "
              "to calculate the MSAs with HHblits."), action='store_true')
    
    parser.add_argument("--max_template_date",
        help=('Maximum template release date to consider. Give value in '
              '"YYYY-MM-DD" format.'), type=validate_date,
        default=date.today().isoformat())
 
    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    
    files_input = [validate_file(f) for f in args.input]
    sequences = [list(SeqIO.parse(f, 'fasta')) for f in files_input]

    out_dir = args.destination
    
    # Save command to output dir
    with open(out_dir/'command.txt', 'w') as f:
        f.write(' '.join(sys.argv))

    exe = AlphafoldIbex(sequences, out_dir=out_dir, recycles=args.recycles,
                    mem=args.mem, time_per_command=args.time, gpus=args.gpus,
                    models_to_relax=args.models_to_relax, mail=args.mail,
                    cpus=args.cpus,
                    multimer_predictions_per_model=args.multimer_predictions_per_model,
                    use_precomputed_msas=args.use_precomputed_msas,
                    gpu_type=args.gpu_type, old_uniclust=args.old_uniclust,
                    max_template_date=args.max_template_date)
    exe.run()
